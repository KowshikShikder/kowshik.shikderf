{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nfunction invertNumber(min, max, num) {\n  return max + min - num;\n}\n\nfunction convertRange(oldMin, oldMax, newMin, newMax, oldValue) {\n  var percent = (oldValue - oldMin) / (oldMax - oldMin);\n  var result = percent * (newMax - newMin) + newMin;\n  return result || 0;\n}\n\nfunction convertWidthToPx(width, containerWidth) {\n  if (typeof width === \"number\") {\n    return width;\n  }\n\n  if (typeof width !== \"string\") {\n    throw new Error(\"Received: \".concat(width, \" - Size must be a number or string\"));\n  }\n\n  if (width.substr(-1) === \"%\") {\n    var percent = 100 / Number(width.slice(0, -1));\n    return containerWidth / percent;\n  }\n\n  if (width.substr(-2) === \"px\") {\n    return Number(width.slice(0, -2));\n  }\n\n  return Number(width);\n}\n\nfunction convertWidthToString(width) {\n  if (typeof width === \"number\") {\n    return width + \"px\";\n  }\n\n  return width;\n}\n\nfunction noop() {}\n\nvar _default = {\n  invertNumber: invertNumber,\n  convertRange: convertRange,\n  convertWidthToPx: convertWidthToPx,\n  convertWidthToString: convertWidthToString,\n  noop: noop\n};\nexports[\"default\"] = _default;","map":{"version":3,"sources":["C:/Users/Kowshik/OneDrive/Desktop/PersonalPortfolio/kowshik-portfolio/node_modules/react-image-magnifiers/dist/utils.js"],"names":["Object","defineProperty","exports","value","invertNumber","min","max","num","convertRange","oldMin","oldMax","newMin","newMax","oldValue","percent","result","convertWidthToPx","width","containerWidth","Error","concat","substr","Number","slice","convertWidthToString","noop","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,SAASE,YAAT,CAAsBC,GAAtB,EAA2BC,GAA3B,EAAgCC,GAAhC,EAAqC;AACnC,SAAOD,GAAG,GAAGD,GAAN,GAAYE,GAAnB;AACD;;AAED,SAASC,YAAT,CAAsBC,MAAtB,EAA8BC,MAA9B,EAAsCC,MAAtC,EAA8CC,MAA9C,EAAsDC,QAAtD,EAAgE;AAC9D,MAAIC,OAAO,GAAG,CAACD,QAAQ,GAAGJ,MAAZ,KAAuBC,MAAM,GAAGD,MAAhC,CAAd;AACA,MAAIM,MAAM,GAAGD,OAAO,IAAIF,MAAM,GAAGD,MAAb,CAAP,GAA8BA,MAA3C;AACA,SAAOI,MAAM,IAAI,CAAjB;AACD;;AAED,SAASC,gBAAT,CAA0BC,KAA1B,EAAiCC,cAAjC,EAAiD;AAC/C,MAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAOA,KAAP;AACD;;AAED,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,UAAM,IAAIE,KAAJ,CAAU,aAAaC,MAAb,CAAoBH,KAApB,EAA2B,oCAA3B,CAAV,CAAN;AACD;;AAED,MAAIA,KAAK,CAACI,MAAN,CAAa,CAAC,CAAd,MAAqB,GAAzB,EAA8B;AAC5B,QAAIP,OAAO,GAAG,MAAMQ,MAAM,CAACL,KAAK,CAACM,KAAN,CAAY,CAAZ,EAAe,CAAC,CAAhB,CAAD,CAA1B;AACA,WAAOL,cAAc,GAAGJ,OAAxB;AACD;;AAED,MAAIG,KAAK,CAACI,MAAN,CAAa,CAAC,CAAd,MAAqB,IAAzB,EAA+B;AAC7B,WAAOC,MAAM,CAACL,KAAK,CAACM,KAAN,CAAY,CAAZ,EAAe,CAAC,CAAhB,CAAD,CAAb;AACD;;AAED,SAAOD,MAAM,CAACL,KAAD,CAAb;AACD;;AAED,SAASO,oBAAT,CAA8BP,KAA9B,EAAqC;AACnC,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAOA,KAAK,GAAG,IAAf;AACD;;AAED,SAAOA,KAAP;AACD;;AAED,SAASQ,IAAT,GAAgB,CAAE;;AAElB,IAAIC,QAAQ,GAAG;AACbtB,EAAAA,YAAY,EAAEA,YADD;AAEbI,EAAAA,YAAY,EAAEA,YAFD;AAGbQ,EAAAA,gBAAgB,EAAEA,gBAHL;AAIbQ,EAAAA,oBAAoB,EAAEA,oBAJT;AAKbC,EAAAA,IAAI,EAAEA;AALO,CAAf;AAOAvB,OAAO,CAAC,SAAD,CAAP,GAAqBwB,QAArB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nfunction invertNumber(min, max, num) {\n  return max + min - num;\n}\n\nfunction convertRange(oldMin, oldMax, newMin, newMax, oldValue) {\n  var percent = (oldValue - oldMin) / (oldMax - oldMin);\n  var result = percent * (newMax - newMin) + newMin;\n  return result || 0;\n}\n\nfunction convertWidthToPx(width, containerWidth) {\n  if (typeof width === \"number\") {\n    return width;\n  }\n\n  if (typeof width !== \"string\") {\n    throw new Error(\"Received: \".concat(width, \" - Size must be a number or string\"));\n  }\n\n  if (width.substr(-1) === \"%\") {\n    var percent = 100 / Number(width.slice(0, -1));\n    return containerWidth / percent;\n  }\n\n  if (width.substr(-2) === \"px\") {\n    return Number(width.slice(0, -2));\n  }\n\n  return Number(width);\n}\n\nfunction convertWidthToString(width) {\n  if (typeof width === \"number\") {\n    return width + \"px\";\n  }\n\n  return width;\n}\n\nfunction noop() {}\n\nvar _default = {\n  invertNumber: invertNumber,\n  convertRange: convertRange,\n  convertWidthToPx: convertWidthToPx,\n  convertWidthToString: convertWidthToString,\n  noop: noop\n};\nexports[\"default\"] = _default;"]},"metadata":{},"sourceType":"script"}